---
- name: Ensure apt is updated and packages are managed
  hosts: all
  vars:
    current_user: "{{ ansible_env.USER }}"  # Automatically detects the current user
    ssh_key_path: "{{ ansible_env.HOME }}/.ssh/id_rsa"  # Path to the private SSH key

  tasks:
    - name: Update the apt cache
      become: yes
      apt:
        update_cache: yes
        cache_valid_time: 3600

    - name: Upgrade all packages
      become: yes
      apt:
        upgrade: dist

    - name: Ensure required packages are installed
      become: yes
      apt:
        name:
          - git
          - htop
          - neovim
          - make
          - build-essential
          - rustup
          - rustc
          - cargo
          - tmux


        state: present 
    - name: Add Google Cloud SDK apt repository keyring
      become: yes
      shell: |
        curl -fsSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | gpg --dearmor -o /usr/share/keyrings/cloud.google.gpg
      args:
        creates: /usr/share/keyrings/cloud.google.gpg

    - name: Add Google Cloud SDK apt repository
      become: yes
      apt_repository:
        repo: "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main"
        state: present

    - name: Update apt cache after adding Google Cloud SDK repository
      become: yes
      apt:
        update_cache: yes
        cache_valid_time: 3600

    - name: Install Google Cloud SDK
      become: yes
      apt:
        name: google-cloud-sdk
        state: present 

    - name: Ensure AWS CLI dependencies are installed
      become: yes
      apt:
        name:
          - unzip
          - curl
        state: present

    - name: Check if AWS CLI is installed
      command: aws --version
      register: aws_cli_check
      ignore_errors: yes

    - name: Download AWS CLI installer if not installed
      get_url:
        url: https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip
        dest: /tmp/awscliv2.zip
      when: aws_cli_check.rc != 0

    - name: Unzip AWS CLI installer if not installed
      unarchive:
        src: /tmp/awscliv2.zip
        dest: /tmp/
        remote_src: yes
      when: aws_cli_check.rc != 0

    - name: Install AWS CLI if not installed
      become: yes
      command: /tmp/aws/install
      when: aws_cli_check.rc != 0

    - name: Verify AWS CLI installation
      command: aws --version
      register: aws_cli_version
      ignore_errors: yes

    - name: Ensure Docker dependencies are installed
      become: yes
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - software-properties-common
        state: present

    - name: Add Docker GPG key
      become: yes
      shell: |
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
      args:
        creates: /usr/share/keyrings/docker-archive-keyring.gpg

    - name: Add Docker apt repository
      become: yes
      apt_repository:
        repo: "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
        state: present

    - name: Update apt cache after adding Docker repository
      become: yes
      apt:
        update_cache: yes

    - name: Install Docker CE
      become: yes
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
        state: present

    - name: Check if user is already in the docker group
      become: yes
      shell: id -nG "{{ current_user }}" | grep -qw docker
      register: user_in_docker_group
      failed_when: false  # Avoid marking the task as failed if grep doesn't find the group
      changed_when: false  # This task is not considered changed

    - name: Add current user to the docker group if not already a member
      become: yes 
      user:
        name: "{{ current_user }}"
        groups: docker
        append: yes
      when:
        - current_user != "root"
        - user_in_docker_group.rc != 0  # Only run if the user is not already in the group

    - name: Check if Docker is installed
      command: docker --version
      register: docker_version_check
      ignore_errors: yes

    - name: Display Docker version
      debug:
        msg: "{{ docker_version_check.stdout }}"

    - name: Check if Docker Compose is available
      command: docker compose version
      register: docker_compose_check
      ignore_errors: yes

    - name: Display Docker Compose version
      debug:
        msg: |
          Docker Compose: {{ docker_compose_check.stdout | default('Not available') }}

    # Devbox Installation
    - name: Check if Devbox is installed
      stat:
        path: /usr/local/bin/devbox
      register: devbox_check

    - name: Install Devbox using curl script
      shell: curl -fsSL https://get.jetpack.io/devbox -o install-devbox.sh && chmod +x ./install-devbox.sh && FORCE=1 ./install-devbox.sh && chmod 755 /usr/local/bin/devbox
      when: not devbox_check.stat.exists

    - name: Check if ~/.bash_aliases exists
      stat:
        path: "{{ ansible_env.HOME }}/.bash_aliases"
      register: bash_aliases_check

    - name: Copy bash_aliases file if it does not already exist
      copy:
        src: ../bash_aliases  # Replace with the source path of your bash_aliases file
        dest: "{{ ansible_env.HOME }}/.bash_aliases"
        owner: "{{ ansible_env.USER }}"
        group: "{{ ansible_env.USER }}"
        mode: '0644'
      when: not bash_aliases_check.stat.exists | default(false) 

    - name: Check if Zellij is installed
      command: which zellij
      register: zellij_check
      failed_when: false  # Prevent failure if Zellij is not installed
      changed_when: false  # This task does not change the system

    - name: Install Zellij if not present
      command: cargo install zellij --locked
        args:
          creates: ~/.cargo/bin/zellij  # Prevent re-installation
      when: zellij_check.rc != 0  # Run only if Zellij is not found

    - name: Check if LunarVim is installed
      stat:
        path: "{{ lunarvim_install_dir }}"
      register: lunarvim_check

    - name: Install LunarVim if not present
      shell: |
        bash <(curl -s https://raw.githubusercontent.com/LunarVim/LunarVim/master/utils/installer/install.sh)
      args:
        executable: /bin/bash
      when: not lunarvim_check.stat.exists

    - name: Verify LunarVim installation
      command: lvim --version
      register: lunarvim_version_check
      ignore_errors: yes

    - name: Display LunarVim version
      debug:
        msg: "{{ lunarvim_version_check.stdout | default('LunarVim is not installed or failed to install') }}"


    - name: Check if SSH private key exists
      stat:
        path: "{{ ssh_key_path }}"
      register: ssh_key_check

    - name: Generate SSH key pair if not present
      command: ssh-keygen -t rsa -b 4096 -f "{{ ssh_key_path }}" -N ""
      when: not ssh_key_check.stat.exists

    - name: Copy ssh config file if it does not already exist
      copy:
        src: ../ssh-config  # Replace with the source path of your bash_aliases file
        dest: "{{ ansible_env.HOME }}/.ssh/config"
        owner: "{{ ansible_env.USER }}"
        group: "{{ ansible_env.USER }}"
        mode: '0644'
      when: not ssh_config_check.stat.exists | default(false)


    - name: Check if ~/.ssh/config exists
      stat:
        path: ~/.ssh/config
      register: ssh_config_check

    - name: Read public SSH key
      slurp:
        src: "{{ ssh_key_path }}.pub"
      register: public_key_content

    - name: Display public SSH key
      debug:
        msg: |
          Your SSH public key:
          {{ public_key_content.content | b64decode }}

